generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id            String      @id @default(cuid())
  name          String
  token         String      @unique
  status        String      @default("ACTIVE")
  expiresAt     DateTime?
  lastUsed      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  environmentId String
  userId        String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Application {
  id                   String           @id @default(cuid())
  name                 String
  description          String?
  appKey               String           @unique
  status               String           @default("ACTIVE")
  authenticationMethod String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  userId               String
  healthCheckUrl       String?
  healthStatus         String           @default("UNKNOWN")
  lastHealthCheckAt    DateTime?
  consecutiveFailures  Int              @default(0)
  consecutiveSuccesses Int              @default(0)
  apiKeys              ApiKey[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs            AuditLog[]
  endpoints            Endpoint[]
  environments         Environment[]
  healthCheckLogs      HealthCheckLog[]

  @@map("applications")
}

model AuditLog {
  id            String       @id @default(cuid())
  action        String
  details       String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime     @default(now())
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id])

  @@map("audit_logs")
}

model DataAgentRelation {
  id                String         @id @default(cuid())
  dataAgentId       String
  environmentId     String
  sourceTableId     String
  targetTableId     String
  relationshipType  String
  sourceColumn      String
  targetColumn      String
  description       String?
  example           String?
  confidence        Float?
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  dataAgent         DataAgent      @relation(fields: [dataAgentId], references: [id], onDelete: Cascade)
  environment       Environment    @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  sourceTable       DataAgentTable @relation("SourceTable", fields: [sourceTableId], references: [id], onDelete: Cascade)
  targetTable       DataAgentTable @relation("TargetTable", fields: [targetTableId], references: [id], onDelete: Cascade)

  @@unique([dataAgentId, environmentId, sourceTableId, targetTableId, sourceColumn, targetColumn])
  @@map("data_agent_relations")
}

model DataAgentTableColumn {
  id                String         @id @default(cuid())
  tableId           String
  columnName        String
  dataType          String
  isNullable        Boolean        @default(true)
  defaultValue      String?
  comment           String?
  isIndexed         Boolean        @default(false)
  isPrimaryKey      Boolean        @default(false)
  isForeignKey      Boolean        @default(false)
  referencedTable   String?
  referencedColumn  String?
  aiDescription     String?
  aiExampleValue    String?
  aiValueType       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  table             DataAgentTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, columnName])
  @@map("data_agent_table_columns")
}

model DataAgentTable {
  id                String                @id @default(cuid())
  dataAgentId       String
  environmentId     String
  tableName         String
  schemaName        String?
  displayName       String?
  description       String?
  rowCount          Int?
  isActive          Boolean               @default(true)
  analysisStatus    String                @default("PENDING")
  analysisResult    String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  sourceRelations   DataAgentRelation[]   @relation("SourceTable")
  targetRelations   DataAgentRelation[]   @relation("TargetTable")
  columns           DataAgentTableColumn[]
  dataAgent         DataAgent             @relation(fields: [dataAgentId], references: [id], onDelete: Cascade)
  environment       Environment           @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([dataAgentId, environmentId, tableName, schemaName])
  @@map("data_agent_tables")
}

model DataAgent {
  id            String              @id @default(cuid())
  name          String              @unique
  description   String?
  connectionType String
  status        String              @default("INACTIVE")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  environments  Environment[]
  tables        DataAgentTable[]
  relations     DataAgentRelation[]

  @@map("data_agents")
}

model Endpoint {
  id            String       @id @default(cuid())
  name          String
  path          String
  method        String
  description   String?
  isPublic      Boolean      @default(false)
  pathParams    String?
  queryParams   String?
  requestBody   String?
  responseBody  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  applicationId String
  environmentId String?
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment? @relation(fields: [environmentId], references: [id])

  @@unique([applicationId, environmentId, path, method])
  @@map("endpoints")
}

model EnvironmentSecurity {
  id                String      @id @default(cuid())
  environmentId     String      @unique
  rateLimitEnabled  Boolean     @default(false)
  rateLimitRequests Int?
  rateLimitWindow   Int?
  vaultKey          String?     // Track which vault key stores credentials
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  environment       Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("environment_security")
}

model Environment {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  customPrompt         String?
  status               String               @default("ACTIVE")
  baseDomain           String?
  healthStatus         String               @default("UNKNOWN")
  lastHealthCheckAt    DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  applicationId        String?
  connectionConfig     String?
  dataAgentId          String?
  environmentType      String               @default("APPLICATION")
  lastConnectedAt      DateTime?
  vaultKey             String?
  apiKeys              ApiKey[]
  tables               DataAgentTable[]
  relations            DataAgentRelation[]
  endpoints            Endpoint[]
  security             EnvironmentSecurity?
  application          Application?         @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  dataAgent            DataAgent?           @relation(fields: [dataAgentId], references: [id], onDelete: Cascade)
  healthCheckLogs      HealthCheckLog[]

  @@unique([environmentType, applicationId, dataAgentId, name])
  @@map("environments")
}

model HealthCheckLog {
  id                   String       @id @default(cuid())
  applicationId        String
  environmentId        String?
  status               String
  statusCode           Int?
  responseTime         Float?
  message              String?
  consecutiveFailures  Int          @default(0)
  consecutiveSuccesses Int          @default(0)
  createdAt            DateTime     @default(now())
  application          Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment          Environment? @relation(fields: [environmentId], references: [id])

  @@map("health_check_logs")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  role         String        @default("USER")
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  apiKeys      ApiKey[]
  applications Application[]
  dataAgents   DataAgent[]

  @@map("users")
}